//
// Created by Mason on 2024/11/12.
//

#include <gtest/gtest.h>
#include <vector>
#include <runtime/runtime_ir.hpp>

TEST(test_network, resnet1) {
    using namespace BatmanInfer;
    const std::string& model_path = "./model/simple_conv_model.onnx";
    RuntimeGraph graph(model_path);
    ASSERT_EQ(int(graph.graph_state()), -2);
    const bool init_success = graph.Init();
    ASSERT_EQ(init_success, true);
    ASSERT_EQ(int(graph.graph_state()), -1);
    graph.Build("Input", "Output");
    ASSERT_EQ(int(graph.graph_state()), 0);

    // Flat list of values obtained from PyTorch
    std::vector<float> values = {
            -0.8221, -0.1798, -0.1126, 0.2713, -0.8481, -0.4372, -0.0946, -0.0583,
            -2.1007, -1.3923, -1.5411, 1.5181, -0.0721, -1.1487, -1.4219, -1.7268,
            -0.1112, -0.1719, 0.7183, -0.9968, -0.6196, 0.1897, 0.5160, 0.8166,
            1.4570, -0.7133, -0.8331, -0.5102, 0.8042, -0.7492, 0.4975, 1.3198,
            -0.1761, -0.0738, -0.2287, -0.1349, -0.5220, 0.0084, -3.1204, -0.0148,
            -0.4290, -2.2395, -0.6191, -1.1632, 1.2720, 0.6740, 0.5005, -0.1900,
            1.0522, 0.9485, -0.0564, -1.2995, -0.1456, -0.6177, -0.1508, 0.3830,
            0.2723, -0.2611, -0.5115, 0.9600, -0.5458, -0.9897, -0.2033, 1.4279,
            -0.0122, 0.7834, -1.4585, 1.3011, -0.0200, 0.3198, 1.9720, 0.0559,
            -0.0076, -0.8125, -2.6682, -0.0305, -0.1292, 0.0279, 0.1891, 0.3302,
            -0.8402, -0.7149, -0.3145, 1.5093, 0.5984, 1.2992, 0.0800, -1.1437,
            0.2359, 0.4861, 1.0315, -0.1981, -2.6036, -0.2022, 2.6011, -1.3800,
            -0.0277, 0.2209, 0.3014, -0.6004, 1.5089, -0.6724, -0.2105, 0.7773,
            -0.3114, -0.1885, 0.4807, -0.2126, 0.0678, -0.7484, 0.1527, -1.5018,
            -0.1881, -0.3079, 0.2182, 1.2895, -0.6094, -0.7499, 0.8064, -0.7379,
            -0.0824, -1.0556, -0.6911, -1.4402, 1.3288, 0.9577, -0.4317, 0.4874,
            -0.3149, 1.4251, 0.3294, 1.1416, -0.0606, 0.9992, -0.2329, 1.1570,
            -0.2031, 1.8238, -1.7177, -0.4902, -1.5216, 0.2912, 0.2867, -0.3069,
            0.3827, 0.8527, 0.6055, 1.5313, -1.3200, -0.5655, 1.0820, 0.8044,
            -0.9117, -0.1997, -0.4584, 0.7640, -1.5693, -0.6447, 0.3694, -0.2315,
            -0.8062, -1.0220, -0.9529, 0.6967, -0.6364, 1.2138, 1.5230, 0.8947,
            1.0867, 0.5246, 0.5252, 0.8190, 0.2895, 1.8148, -1.4441, -0.2630,
            0.5112, 0.6883, -0.6120, -2.2585, -0.9187, 0.8600, 0.0734, -1.9146,
            -0.9552, 1.0034, -0.8933, 0.0367, 1.0350, -0.2726, 0.3324, 0.3513,
            1.0866, 0.3597, 0.8429, -0.2365, -0.9589, 0.5507, -0.2882, -0.0435,
            0.2021, -0.2324, 0.8064, -0.3673, -0.8049, -0.3141, -1.5311, -0.1743,
            -0.1568, -0.3478, 1.0776, -2.0128, -0.1094, 0.1056, -0.1713, 0.0504,
            0.5135, -0.8938, -0.9754, -0.1169, 2.0340, 0.3205, -1.2444, -2.7394,
            -0.2715, -2.4944, 0.4706, -0.8052, -1.5335, 0.1092, 0.7752, 0.1823,
            0.7472, 0.2650, -2.5391, 0.4004, 0.5484, -0.4269, 0.7466, 1.6529,
            0.7388, -1.5903, -1.1654, 2.0833, -2.3194, 1.2160, -1.2516, 0.8337,
            0.9195, -0.7090, -0.4915, -0.7782, -1.5908, -0.9577, -1.1290, 1.1883
    };

    std::shared_ptr<Tensor<float>> my_tensor = std::make_shared<Tensor<float>>(4, 8, 8);
    my_tensor->Fill(values, false);
    std::vector<sftensor> input{my_tensor};
    input.at(0)->Show();

    auto outputs = graph.Forward(input, true);
    for (auto output: outputs) {
        output->Show();
        std::cout << output->size() << std::endl;
    }
    std::cout << "Hello World" << std::endl;
}