//
// Created by Mason on 2024/11/12.
//

#include <gtest/gtest.h>
#include <vector>
#include <runtime/runtime_ir.hpp>

TEST(test_network, resnet1) {
    using namespace BatmanInfer;
    const std::string& model_path = "./model/simple_conv_model.onnx";
    RuntimeGraph graph(model_path);
    ASSERT_EQ(int(graph.graph_state()), -2);
    const bool init_success = graph.Init();
    ASSERT_EQ(init_success, true);
    ASSERT_EQ(int(graph.graph_state()), -1);
    graph.Build("Input", "Output");
    ASSERT_EQ(int(graph.graph_state()), 0);

    // Flat list of values obtained from PyTorch
    std::vector<float> values = {
            0.5300, 0.4700, 0.7300, 0.3600, 0.5100, 0.6200, 0.4300, 0.4900, 0.6000, 0.2700,
            0.4800, 0.2400, 0.3400, 0.1700, 0.5000, 0.4100, 0.5600, 0.6500, 0.4600, 0.5200,
            0.6300, 0.4700, 0.2700, 0.3200, 0.6500, 0.5000, 0.3000, 0.7600, 0.4100, 0.6500,
            0.5000, 0.3000, 0.6500, 0.2600, 0.6000, 0.6100, 0.6800, 0.6100, 0.0800, 0.5600,
            0.4800, 0.3800, 0.3000, 0.4100, 0.5800, 0.6500, 0.4700, 0.4000, 0.3600, 0.5100,
            0.4000, 0.5600, 0.5700, 0.3800, 0.2100, 0.5100, 0.3700, 0.5900, 0.5800, 0.4800,
            0.2700, 0.5500, 0.3800, 0.2800, 0.5000, 0.6700, 0.7900, 0.3600, 0.4100, 0.4800,
            0.2300, 0.4800, 0.3700, 0.5000, 0.3300, 0.6200, 0.4500, 0.3200, 0.7400, 0.7400,
            0.4800, 0.5600, 0.4100, 0.4600, 0.5700, 0.7600, 0.2800, 0.2700, 0.6600, 0.5100,
            0.9000, 0.5100, 0.4600, 0.4500, 0.3500, 0.3400, 0.1500, 0.5700, 0.3500, 0.3400,
            0.3600, 0.2300, 0.5800, 0.6200, 0.6200, 0.7500, 0.6800, 0.7500, 0.3000, 0.4100,
            0.5500, 0.2400, 0.4900, 0.2600, 0.3500, 1.0000, 0.4500, 0.7800, 0.6100, 0.3600,
            0.5600, 0.4500, 0.7700, 0.4400, 0.8300, 0.6500, 0.4200, 0.7600, 0.4000, 0.8000,
            0.5900, 0.6300, 0.5400, 0.6200, 0.3400, 0.3500, 0.6300, 0.4100, 0.5400, 0.1300,
            0.3900, 0.4700, 0.4100, 0.3700, 0.5900, 0.6200, 0.2400, 0.3400, 0.1200, 0.4100,
            0.3900, 0.6500, 0.5200, 0.5700, 0.8100, 0.4000, 0.4400, 0.7000, 0.4400, 0.3600,
            0.3600, 0.3800, 0.4300, 0.3000, 0.7700, 0.5600, 0.6100, 0.4900, 0.6100, 0.3500,
            0.4600, 0.6600, 0.6000, 0.3800, 0.5900, 0.3900, 0.3600, 0.5100, 0.5800, 0.3900,
            0.2600, 0.3000, 0.3600, 0.6000, 0.2700, 0.5900, 0.2900, 0.3600, 0.3200, 0.4100,
            0.2300, 0.4700, 0.4600, 0.3700, 0.3300, 0.5400, 0.6400, 0.6100, 0.4700, 0.3800,
            0.4900, 0.6300, 0.4900, 0.5700, 0.3200, 0.3000, 0.5700, 0.3300, 0.5500, 0.4200,
            0.6300, 0.4900, 0.5100, 0.5500, 0.6300, 0.5800, 0.6600, 0.0000, 0.7700, 0.4100,
            0.3500, 0.3200, 0.4400, 0.3300, 0.3800, 0.3600, 0.3000, 0.4700, 0.5200, 0.3500,
            0.5400, 0.5200, 0.3700, 0.2800, 0.5600, 0.6000, 0.3800, 0.6300, 0.4600, 0.6100,
            0.5500, 0.6200, 0.7000, 0.2400, 0.4700, 0.4700, 0.4400, 0.4200, 0.4500, 0.7100,
            0.1700, 0.5100, 0.2200, 0.4400, 0.5400, 0.5700
    };

    std::cout << values.size() << std::endl;
    std::shared_ptr<Tensor<float>> my_tensor = std::make_shared<Tensor<float>>(4, 8, 8);
    my_tensor->Fill(values);
    std::vector<sftensor> input{my_tensor};
    input.at(0)->Show();

    auto outputs = graph.Forward(input, true);
    outputs.at(0)->Show();
    std::cout << "Hello World" << std::endl;
}